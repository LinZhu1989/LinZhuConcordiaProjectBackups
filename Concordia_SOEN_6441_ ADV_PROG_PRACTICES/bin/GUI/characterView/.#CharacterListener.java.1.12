package GUI.characterView;

/**
 * @author DanZhang
 * SOEN 6441 Team Project 
 * Winter 2014
 */
import java.awt.Canvas;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Event;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.io.IOException;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;

import org.xml.sax.SAXException;

import utility.UserInterfaceType;
import GUI.itemView.ItemDraw;
import GUI.mainView.MainCanvas;
import GUI.mainView.MainDraw;
import GUI.mapView.MapBlock;
import GUI.mapView.MapRandom;
import GUI.mapView.MapResource;
import GUI.mapView.MapShowInfor;
import Data.Builder.BullyBuilder;
import Data.Builder.CharacterDirector;
import Data.Builder.NimbleBuilder;
import Data.Builder.TankBuilder;
import Data.Character.GameCharacter;
import Data.dataIO.*;

/**
 * this is the listener for character
 * 
 */
public class CharacterListener {

	static int dwarfNum = 0;
	static int elfNum = 0;
	static int witchNum = 0;
	static boolean dwarfNumFlag = false;
	static boolean elfNumFlag = false;
	static boolean witchNumFlag = false;
	private CharacterResource R;
	private CharacterDraw cd;
	boolean firstHero = true;

	public CharacterListener(CharacterDraw cd) {
		this.R = cd.R;
		this.cd = cd;
		firstHero = true;
	}

	/**
	 * handle the action for changing attribute
	 * 
	 * @param mx
	 * @param my
	 */
	private void attributeAction(int mx, int my) {
		
		switch (checkAttributeArea(mx, my)) {
		case 1:
			System.out.println("Area 1 Up");
			if (cd.currenHero == 0) {
				cd.currenHero = cd.hero.size() - 1;
			} else
				cd.currenHero--;
			cd.R.charInfor.setRole(	cd.hero.get(cd.currenHero).getRole());
			cd.R.charInfor.refreshCharacterInfos();
			cd.hero.get(cd.currenHero).transferString();
			break;
		case 2:

			if (cd.currenHero == cd.hero.size() - 1) {
				cd.currenHero = 0;
			} else
				cd.currenHero++;
			cd.hero.get(cd.currenHero).transferString();
			System.out.println("Area 1 Down");
			cd.R.charInfor.setRole(	cd.hero.get(cd.currenHero).getRole());
			cd.R.charInfor.refreshCharacterInfos();
			System.out.println(" " + cd.currenHero);
			break;
		case 3:
			
				cd.hero.get(cd.currenHero).getRole().levelUpByOne(cd.battleLog);
				cd.hero.get(cd.currenHero).update();
				cd.R.charInfor.refreshCharacterInfos();
			
			System.out.println("Strength Up");
			break;
		case 4:

			cd.hero.get(cd.currenHero).getRole().levelDownByOne(cd.battleLog);
			cd.hero.get(cd.currenHero).update();
			cd.R.charInfor.refreshCharacterInfos();
			System.out.println("Strength Down");
			break;
		case 5:
			if (remainAttrPoint()) {
				cd.hero.get(cd.currenHero).getRole().ability.addAbility(0, 1,
						0, 0, 0, 0);
				cd.hero.get(cd.currenHero).getRole().status.addAbilityPts(-1);
				cd.hero.get(cd.currenHero).update();
			}
			System.out.println("Dexterity Up");
			break;
		case 6:
			if (attriNoZeron(cd.hero.get(cd.currenHero).getRole().ability
					.getDexterity())) {
				cd.hero.get(cd.currenHero).getRole().ability.addAbility(0, -1,
						0, 0, 0, 0);
				cd.hero.get(cd.currenHero).getRole().status.addAbilityPts(1);
				cd.hero.get(cd.currenHero).update();
			}

			System.out.println("Dexterity Down");
			break;
		case 7:
			if (remainAttrPoint()) {
				cd.hero.get(cd.currenHero).getRole().ability.addAbility(0, 0,
						1, 0, 0, 0);
				cd.hero.get(cd.currenHero).getRole().status.addAbilityPts(-1);
				cd.hero.get(cd.currenHero).update();
			}
			System.out.println("Constitution Up");
			break;

		case 8:
			if (attriNoZeron(cd.hero.get(cd.currenHero).getRole().ability
					.getConstitution())) {
				cd.hero.get(cd.currenHero).getRole().ability.addAbility(0, 0,
						-1, 0, 0, 0);
				cd.hero.get(cd.currenHero).getRole().status.addAbilityPts(1);
				cd.hero.get(cd.currenHero).update();
			}

			System.out.println("Constitution Down");
			break;
		case 9:
			if (remainAttrPoint()) {
				cd.hero.get(cd.currenHero).getRole().ability.addAbility(0, 0,
						0, 1, 0, 0);
				cd.hero.get(cd.currenHero).getRole().status.addAbilityPts(-1);
				cd.hero.get(cd.currenHero).update();
			}
			System.out.println("Wisdom Up");
			break;
		case 10:
			if (attriNoZeron(cd.hero.get(cd.currenHero).getRole().ability
					.getWisdom())) {
				cd.hero.get(cd.currenHero).getRole().ability.addAbility(0, 0,
						0, -1, 0, 0);
				cd.hero.get(cd.currenHero).getRole().status.addAbilityPts(1);
				cd.hero.get(cd.currenHero).update();
			}

			System.out.println("Wisdom Down");
			break;
		case 11:
			if (remainAttrPoint()) {
				cd.hero.get(cd.currenHero).getRole().ability.addAbility(0, 0,
						0, 0, 1, 0);
				cd.hero.get(cd.currenHero).getRole().status.addAbilityPts(-1);
				cd.hero.get(cd.currenHero).update();
			}
			System.out.println("Intelligence Up");
			break;
		case 12:
			if (attriNoZeron(cd.hero.get(cd.currenHero).getRole().ability
					.getIntelligence())) {
				cd.hero.get(cd.currenHero).getRole().ability.addAbility(0, 0,
						0, 0, -1, 0);
				cd.hero.get(cd.currenHero).getRole().status.addAbilityPts(1);
				cd.hero.get(cd.currenHero).update();
			}

			System.out.println("Intelligence Down");
			break;
		case 13:
			if (remainAttrPoint()) {
				cd.hero.get(cd.currenHero).getRole().ability.addAbility(0, 0,
						0, 0, 0, 1);
				cd.hero.get(cd.currenHero).getRole().status.addAbilityPts(-1);
				cd.hero.get(cd.currenHero).update();
			}
			System.out.println("Charisma Up");
			break;
		case 14:
			if (attriNoZeron(cd.hero.get(cd.currenHero).getRole().ability
					.getCharisma())) {
				cd.hero.get(cd.currenHero).getRole().ability.addAbility(0, 0,
						0, 0, 0, -1);
				cd.hero.get(cd.currenHero).getRole().status.addAbilityPts(1);
				cd.hero.get(cd.currenHero).update();
			}

			System.out.println("Charisma Down");
			break;

		}
		System.out.println(cd.hero.get(cd.currenHero).getRole().status
				.getAbilityPoint());

		cd.c.repaint();
	}

	private boolean attriNoZeron(int i) {
		if (i > 0)
			return true;
		else
			return false;
	}

	/**
	 * listener for mouse clicked
	 * 
	 * @param e
	 */
	public void mouseClickedListener(MouseEvent e) {
		int mx = e.getX();
		int my = e.getY();
		switch (checkArea(mx, my)) {
		case 1:
			if(cd.m_ParentUI.getInterfaceType()==UserInterfaceType.BATTLE_UI){
				return;
			}
			attributeAction(mx, my);
			break;
		case 2:
			
			commandAction(mx, my);
			break;
		case 3:
			if(cd.m_ParentUI.getInterfaceType()==UserInterfaceType.BATTLE_UI){
				return;
			}
			skillTreeAction(mx, my);
			break;
		case 4:
			if(cd.m_ParentUI.getInterfaceType()==UserInterfaceType.BATTLE_UI){
				return;
			}
			createCharacterAction(mx, my);
		}

	}

	private boolean createCharacterAction(int mx, int my) {
		if(cd.m_ParentUI.getInterfaceType()!=UserInterfaceType.MAIN_UI){
			return true;
		}
		CharacterGUI newHero = null;

		CharacterDirector roleDirector = new CharacterDirector();
		BullyBuilder bullyBuilder = new BullyBuilder();
		NimbleBuilder nimbleBuilder = new NimbleBuilder();
		TankBuilder tankBuilder = new TankBuilder();

		if (cd.newCharacter) {
			switch (checkNewCharacterType(mx, my)) {

			case 1:
				
				if (firstHero) {
					roleDirector.setCharacterBuilder(bullyBuilder);
					roleDirector.constructCharacter(cd.battleLog);
					newHero = new CharacterGUI(roleDirector.getGameCharacter(),
							R,cd.battleLog);
					// newHero= new CharacterGUI(1,R);
					// newHero.setZero();
					// newHero.update();
					cd.hero.add(newHero);
					cd.currenHero = cd.hero.indexOf(newHero);
					cd.R.charInfor.setRole(	cd.hero.get(cd.currenHero).getRole());
					cd.R.charInfor.refreshCharacterInfos();
					firstHero = false;
					dwarfNumFlag = true;
					cd.logDraw=true;
					cd.c.repaint();
				} else {
					cd.hero.remove(cd.currenHero);
					System.out.println("0 " + CharacterGUI.bullyNum);
					roleDirector.setCharacterBuilder(bullyBuilder);
					roleDirector.constructCharacter(cd.battleLog);
					newHero = new CharacterGUI(roleDirector.getGameCharacter(),
							R,cd.battleLog);
					// newHero= new CharacterGUI(1,R);
					// newHero.setZero();
					// newHero.update();
					cd.hero.add(newHero);
					cd.currenHero = cd.hero.indexOf(newHero);
					cd.R.charInfor.setRole(	cd.hero.get(cd.currenHero).getRole());
					cd.R.charInfor.refreshCharacterInfos();
					cd.logDraw=true;
					cd.c.repaint();
				}
				break;
			case 2:

				System.out.println("Create Elf");

				if (firstHero) {
					roleDirector.setCharacterBuilder(nimbleBuilder);
					roleDirector.constructCharacter(cd.battleLog);
					newHero = new CharacterGUI(roleDirector.getGameCharacter(),
							R,cd.battleLog);
//					newHero = new CharacterGUI(2, R);
//					newHero.setZero();
//					newHero.transferString();
					cd.hero.add(newHero);
					cd.currenHero = cd.hero.indexOf(newHero);
					System.out.println("11 " + cd.currenHero);
					cd.R.charInfor.setRole(	cd.hero.get(cd.currenHero).getRole());
					cd.R.charInfor.refreshCharacterInfos();
					firstHero = false;
					elfNumFlag = true;
					cd.logDraw=true;
					cd.c.repaint();
				} else {
					cd.hero.remove(cd.currenHero);
					roleDirector.setCharacterBuilder(nimbleBuilder);
					roleDirector.constructCharacter(cd.battleLog);
					newHero = new CharacterGUI(roleDirector.getGameCharacter(),
							R,cd.battleLog);
//					newHero = new CharacterGUI(2, R);
//					newHero.setZero();
//					newHero.update();
					cd.hero.add(newHero);
					cd.currenHero = cd.hero.indexOf(newHero);
					cd.R.charInfor.setRole(	cd.hero.get(cd.currenHero).getRole());
					cd.R.charInfor.refreshCharacterInfos();
					cd.logDraw=true;
					cd.c.repaint();
				}
				break;
			case 3:

				System.out.println("Create Wit");

				
				if (firstHero) {
					roleDirector.setCharacterBuilder(tankBuilder);
					roleDirector.constructCharacter(cd.battleLog);
					newHero = new CharacterGUI(roleDirector.getGameCharacter(),
							R,cd.battleLog);
//					newHero = new CharacterGUI(3, R);
//					newHero.setZero();
//					newHero.update();
					System.out.println("Size " + cd.hero.size());
					cd.hero.add(newHero);
					System.out.println("Size " + cd.hero.size());
					cd.currenHero = cd.hero.indexOf(newHero);
					cd.R.charInfor.setRole(	cd.hero.get(cd.currenHero).getRole());
					cd.R.charInfor.refreshCharacterInfos();
					firstHero = false;
					witchNumFlag = true;
					cd.logDraw=true;
					cd.c.repaint();
				} else {
					cd.hero.remove(cd.currenHero);
					roleDirector.setCharacterBuilder(tankBuilder);
					roleDirector.constructCharacter(cd.battleLog);
					newHero = new CharacterGUI(roleDirector.getGameCharacter(),
							R,cd.battleLog);
//					newHero = new CharacterGUI(3, R);
//					newHero.setZero();
//					newHero.update();
					cd.hero.add(newHero);
					cd.currenHero = cd.hero.indexOf(newHero);
					cd.R.charInfor.setRole(	cd.hero.get(cd.currenHero).getRole());
					cd.R.charInfor.refreshCharacterInfos();
					cd.logDraw=true;
					cd.c.repaint();
				}
				break;

			case 4:

				System.out.println("Create Ok "+firstHero);
					if(!firstHero){
						cd.newCharacter=false;
						firstHero=true;
						dwarfNumFlag = false;
						elfNumFlag = false;
						witchNumFlag = false;
						cd.logDraw=false;
						
						cd.c.repaint();
					}

			}

			return true;
		} else
			return false;
	}

	private int checkNewCharacterType(int mx, int my) {
		if (mx > R.newDwarfX && mx < R.newHeroWidth + R.newDwarfX) {
			if (my > R.newDwarfY && my < R.newDwarfY + R.newHeroHeight)
				return 1;
		} else if (mx > R.newElfX && mx < R.newHeroWidth + R.newElfX) {
			if (my > R.newElfY && my < R.newElfY + R.newHeroHeight)
				return 2;
		} else if (mx > R.newWitchX && mx < R.newHeroWidth + R.newWitchX) {
			if (my > R.newWitchY && my < R.newWitchY + R.newHeroHeight)
				return 3;
		} else if (mx > R.newOKX && mx < R.newHeroWidth + R.newOKX) {
			if (my > R.newOKY && my < R.newOKY + R.newHeroHeight)
				return 4;
		}
		return 0;
	}

	private void skillTreeAction(int mx, int my) {
		
		if(cd.logDraw)
		{
			if(mx>cd.battleLog.arrowDownX&&mx<cd.battleLog.arrowDownX+cd.battleLog.arrowNumWidth)
			{
				//System.out.println("here");
				if(my>cd.battleLog.arrowUpY&&my<cd.battleLog.arrowUpY+cd.battleLog.arrowNumHeight)
				{
					System.out.println("1up");
					cd.battleLog.arrowUp();
					cd.c.repaint();
				}
				else if(my>cd.battleLog.arrowDownY&&my<cd.battleLog.arrowDownY+cd.battleLog.arrowNumHeight)
				{
					cd.battleLog.arrowDown();
					System.out.println("1down");
					cd.c.repaint();
				}

			
		}
		else
		{
			switch (checkSkillTreeArea(mx, my)) {
			case 1:
				System.out.println("1_1 UP");
				if(cd.hero.get(cd.currenHero).judgeSkillLvUp(1, 1))
				{
					cd.hero.get(cd.currenHero).skillUpdate();
					cd.c.repaint();
				}
					
				break;
		case 2:
			System.out.println("2_1 UP");
			if (cd.hero.get(cd.currenHero).judgeSkillLvUp(2, 1)) {
				cd.hero.get(cd.currenHero).skillUpdate();
				cd.c.repaint();
			}
			break;
		case 3:
			System.out.println("3_1 UP");
			if (cd.hero.get(cd.currenHero).judgeSkillLvUp(3, 1)) {
				cd.hero.get(cd.currenHero).skillUpdate();
				cd.c.repaint();
			}
			break;
			
			case 4:
				System.out.println("1_1 DOWN");
				break;
			case 5:
				System.out.println("2_1 DOWN");
				break;
			case 6:
				System.out.println("3_1 DOWN");
				break;

			case 7:
				System.out.println("1_2 UP");
				if(cd.hero.get(cd.currenHero).judgeSkillLvUp(1, 2))
				{
					cd.hero.get(cd.currenHero).skillUpdate();
					cd.c.repaint();
				}
				break;
			case 8:
				System.out.println("2_2 UP");
				if(cd.hero.get(cd.currenHero).judgeSkillLvUp(2, 2))
				{
					cd.hero.get(cd.currenHero).skillUpdate();
					cd.c.repaint();
				}
				break;
			case 9:
				System.out.println("3_2 UP");
				if(cd.hero.get(cd.currenHero).judgeSkillLvUp(3, 2))
				{
					cd.hero.get(cd.currenHero).skillUpdate();
					cd.c.repaint();
				}
				break;

			case 10:
				System.out.println("1_2 DOWN");
				break;
			case 11:
				System.out.println("2_2 DOWN");
				break;
			case 12:
				System.out.println("3_2 DOWN");
				break;

			case 13:
				System.out.println("1_3 UP");
				if(cd.hero.get(cd.currenHero).judgeSkillLvUp(1, 3))
				{
					cd.hero.get(cd.currenHero).skillUpdate();
					cd.c.repaint();
				}
				break;
			case 14:
				System.out.println("2_3 UP");
				if(cd.hero.get(cd.currenHero).judgeSkillLvUp(2, 3))
				{
					cd.hero.get(cd.currenHero).skillUpdate();
					cd.c.repaint();
				}
				break;
			case 15:
				System.out.println("3_3 UP");
				if(cd.hero.get(cd.currenHero).judgeSkillLvUp(3, 3))
				{
					cd.hero.get(cd.currenHero).skillUpdate();
					cd.c.repaint();
				}
				break;

			case 16:
				System.out.println("1_3 DOWN");
				break;
			case 17:
				System.out.println("2_3 DOWN");
				break;
			case 18:
				System.out.println("3_3 DOWN");
				break;

		}
		}
		}
		
	}

	private int checkSkillTreeArea(int mx, int my) {
		if (mx > R.skill1_1ArrowUpX
				&& mx < R.skill1_1ArrowUpX + R.skillArrowWidth) {
			if (my > R.skill1_1ArrowUpY
					&& my < R.skill1_1ArrowUpY + R.skillHeight)
				return 1;
			else if (my > R.skill2_1ArrowUpY
					&& my < R.skill2_1ArrowUpY + R.skillHeight)
				return 2;
			else if (my > R.skill3_1ArrowUpY
					&& my < R.skill3_1ArrowUpY + R.skillHeight)
				return 3;
		} else if (mx > R.skill1_1ArrowDownX
				&& mx < R.skill1_1ArrowDownX + R.skillArrowWidth) {
			if (my > R.skill1_1ArrowDownY
					&& my < R.skill1_1ArrowDownY + R.skillHeight)
				return 4;
			else if (my > R.skill2_1ArrowDownY
					&& my < R.skill2_1ArrowDownY + R.skillHeight)
				return 5;
			else if (my > R.skill3_1ArrowDownY
					&& my < R.skill3_1ArrowDownY + R.skillHeight)
				return 6;
		}

		else if (mx > R.skill1_2ArrowUpX
				&& mx < R.skill1_2ArrowUpX + R.skillArrowWidth) {
			if (my > R.skill1_2ArrowUpY
					&& my < R.skill1_2ArrowUpY + R.skillHeight)
				return 7;
			else if (my > R.skill2_2ArrowUpY
					&& my < R.skill2_2ArrowUpY + R.skillHeight)
				return 8;
			else if (my > R.skill3_2ArrowUpY
					&& my < R.skill3_2ArrowUpY + R.skillHeight)
				return 9;
		} else if (mx > R.skill1_2ArrowDownX
				&& mx < R.skill1_2ArrowDownX + R.skillArrowWidth) {
			if (my > R.skill1_2ArrowDownY
					&& my < R.skill1_2ArrowDownY + R.skillHeight)
				return 10;
			else if (my > R.skill2_2ArrowDownY
					&& my < R.skill2_2ArrowDownY + R.skillHeight)
				return 11;
			else if (my > R.skill3_2ArrowDownY
					&& my < R.skill3_2ArrowDownY + R.skillHeight)
				return 12;
		}

		else if (mx > R.skill1_3ArrowUpX
				&& mx < R.skill1_3ArrowUpX + R.skillArrowWidth) {
			if (my > R.skill1_3ArrowUpY
					&& my < R.skill1_3ArrowUpY + R.skillHeight)
				return 13;
			else if (my > R.skill2_3ArrowUpY
					&& my < R.skill2_3ArrowUpY + R.skillHeight)
				return 14;
			else if (my > R.skill3_3ArrowUpY
					&& my < R.skill3_3ArrowUpY + R.skillHeight)
				return 15;
		} else if (mx > R.skill1_3ArrowDownX
				&& mx < R.skill1_3ArrowDownX + R.skillArrowWidth) {
			if (my > R.skill1_3ArrowDownY
					&& my < R.skill1_3ArrowDownY + R.skillHeight)
				return 16;
			else if (my > R.skill2_3ArrowDownY
					&& my < R.skill2_3ArrowDownY + R.skillHeight)
				return 17;
			else if (my > R.skill3_3ArrowDownY
					&& my < R.skill3_3ArrowDownY + R.skillHeight)
				return 18;
		}
		return 0;

	}

	private int checkCommandArea(int mx, int my) {
		if (mx > R.rectCreateX && mx < R.rectCreateX + R.rectCommandWidth) {
			if (my > R.rectLoadY && my < R.rectLoadY + R.rectCommandHeight)
				return 3;
			else if (my > R.rectCreateY
					&& my < R.rectCreateY + R.rectCommandHeight)
				return 1;
		}

		else if (mx > R.rectSaveX && mx < R.rectSaveX + R.rectCommandWidth)

		{
			if (my > R.rectSaveY && my < R.rectSaveY + R.rectCommandHeight)
				return 2;
			else if (my > R.rectExitY && my < R.rectExitY + R.rectCommandHeight)
				return 4;
		}

		return -1;

	}

	private void commandAction(int mx, int my) {
		switch (checkCommandArea(mx, my)) {
		case 1:
			if(cd.m_ParentUI.getInterfaceType()==UserInterfaceType.BATTLE_UI){
				return;
			}
			commandCreateAction();
			System.out.println("Create Role");
			break;
		case 2:
			if(cd.m_ParentUI.getInterfaceType()==UserInterfaceType.BATTLE_UI){
				return;
			}
			System.out.println("Save Role");
			CharacterSave saver = new CharacterSave();
			saver.saveCharacter(this.cd.hero.get(cd.currenHero).getRole());
			break;
		case 3:
			if(cd.m_ParentUI.getInterfaceType()==UserInterfaceType.BATTLE_UI){
				return;
			}
			System.out.println("Load Role");
			CharacterLoad load = new CharacterLoad();
			GameCharacter newHero = new GameCharacter("No Items");

			if (load.characterLoad(newHero) == true) {
				System.out.println(newHero.getInfo().getRace());
				CharacterGUI temp = new CharacterGUI(newHero, R,cd.battleLog);
				cd.hero.add(temp);
				cd.currenHero = cd.hero.size() - 1;
				cd.c.repaint();
			}

			break;
		case 4:
			System.out.println("Exit");
			//cd.c.switchTo(UserInterfaceType.MAIN_UI, cd);
			if(cd.m_ParentUI.getInterfaceType()==UserInterfaceType.BATTLE_UI){
				cd.c.switchTo(UserInterfaceType.BATTLE_UI, cd);
			}else{
				cd.c.switchTo(UserInterfaceType.MAIN_UI, cd);
			}
			
			System.out.println("Exit Role");
			cd.c.repaint();
			break;
		case 5:
			break;

		}
	}

	private void commandCreateAction() {
		cd.newCharacter = true;
		cd.c.repaint();

	}

	private int checkArea(int mx, int my) {
		if (mx > R.frameHorizonal1X
				&& mx < R.frameHorizonal1X + R.frameHorizonalWidth
				&& my > R.frameHorizonal1Y && my < R.frameHorizonal4Y)
			return 3;
		if (mx > R.rectCreateX && mx < R.rectExitX + R.rectCommandWidth) {
			if (my > R.rectCreateY && my < R.rectExitY + R.rectCommandHeight)
				return 2;
			else if (mx > R.itemX && mx < R.itemX + R.AttributePointWidth) {
				if (my > R.itemY && my < R.itemY + R.AttributePointHeight) {
					System.out.println("ITEM");
					itemAction();
				}
			}

		} else if (mx < R.frameHorizonal1X) {
			return 1;
		} else
			return 4;
		return 5;

	}

	private boolean remainAttrPoint() {
		if (cd.hero.get(cd.currenHero).getRole().status.getAbilityPoint() > 0)
			return true;
		else
			return false;
	}

	private int checkAttributeArea(int mx, int my) {

		if (mx > R.arrowUpX && mx < R.arrowDownX + R.arrowWidth) {
			if (my < R.arrowDownY + R.arrowHeight) {
				if (my > R.arrowUpY && my < R.arrowUpY + R.arrowHeight)
					return 1;
				else if (my > R.arrowDownY)
					return 2;
			} else if (mx > R.arrowX && mx < R.arrowX + R.arrowNumWidth) {
				if (my > R.arrowUpStrengthY
						&& my < R.arrowUpStrengthY + R.arrowNumHeight)
					return 3;
				else if (my > R.arrowDownStrengthY
						&& my < R.arrowDownStrengthY + R.arrowNumHeight)
					return 4;
				else if (my > R.arrowUpDexterityY
						&& my < R.arrowUpDexterityY + R.arrowNumHeight)
					return 5;
				else if (my > R.arrowDownDexterityY
						&& my < R.arrowDownDexterityY + R.arrowNumHeight)
					return 6;
				else if (my > R.arrowUpConstitutionY
						&& my < R.arrowUpConstitutionY + R.arrowNumHeight)
					return 7;
				else if (my > R.arrowDownConstitutionY
						&& my < R.arrowDownConstitutionY + R.arrowNumHeight)
					return 8;
				else if (my > R.arrowUpWisdomY
						&& my < R.arrowUpWisdomY + R.arrowNumHeight)
					return 9;
				else if (my > R.arrowDownWisdomY
						&& my < R.arrowDownWisdomY + R.arrowNumHeight)
					return 10;
				else if (my > R.arrowUpIntelligenceY
						&& my < R.arrowUpIntelligenceY + R.arrowNumHeight)
					return 11;
				else if (my > R.arrowDownIntelligenceY
						&& my < R.arrowDownIntelligenceY + R.arrowNumHeight)
					return 12;
				else if (my > R.arrowUpCharismaY
						&& my < R.arrowUpCharismaY + R.arrowNumHeight)
					return 13;
				else if (my > R.arrowDownCharismaY
						&& my < R.arrowDownCharismaY + R.arrowNumHeight)
					return 14;
			}

		}

		return 16;

	}

	private void itemAction() {
		cd.c.switchTo(UserInterfaceType.ITEM_UI, cd);
	}
}
